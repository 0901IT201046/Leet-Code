 Problem
 Longest Increasing Subsequence II
 
 You are given an integer array nums and an integer k.

 Find the longest subsequence of nums that meets the following requirements:

 The subsequence is strictly increasing and
 The difference between adjacent elements in the subsequence is at most k.
 Return the length of the longest subsequence that meets the requirements.

 A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
 
 Example 1:
Input: nums = [4,2,1,4,3,4,5,8,15], k = 3
Output: 5
Explanation:
The longest subsequence that meets the requirements is [1,3,4,5,8].
The subsequence has a length of 5, so we return 5.
Note that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.

Example 2:
Input: nums = [7,4,5,1,8,12,4,7], k = 5
Output: 4
Explanation:
The longest subsequence that meets the requirements is [4,5,8,12].
The subsequence has a length of 4, so we return 4

Example 3:

Input: nums = [1,5], k = 1
Output: 1
Explanation:
The longest subsequence that meets the requirements is [1].
The subsequence has a length of 1, so we return 1.
 
 Constraints:

1 <= nums.length <= 105
1 <= nums[i], k <= 105

                                                               SOLUTION
                                                               
Using C++ Segment Tree
class Solution {
public:
    int n;
    vector<int> segtree;
    
    int BestRange(int start, int end) {
        int res = 0;
        start += 1e5 - 1;
        end += 1e5 - 1;
        
        while (start < end) {
            res = max({segtree[start], segtree[end], res});
            if (start % 2 == 0) start++;
            if (end % 2 == 1) end--;
            start = (start - 1) / 2;
            end = (end - 1) / 2;
        }
        
        if (start == end) res = max(segtree[start], res);
        
        return res;
    }
    
    void Update(int idx, int newlen) {
        idx += 1e5 - 1;
        while (idx >= 0) {
            segtree[idx] = max(newlen, segtree[idx]);
            if (idx == 0) idx = -1;
            else idx = (idx - 1) / 2;
        }
        return;
    }
    
    int lengthOfLIS(vector<int>& nums, int k) {
        int ans = 0;
        n = nums.size();
        segtree.resize(2e5);
        
        for (int i = 0; i < n; i++) nums[i]--;
        
        for (int i : nums) {
            int longest = 1;
            if (i > 0) longest = BestRange(max(i - k, 0), i - 1) + 1;
            ans = max(longest, ans);
            Update(i, longest);
        }
        
        return ans;
    }
};
                                                               
